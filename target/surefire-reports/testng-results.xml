<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="0" failed="1" ignored="0" total="4" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="Surefire suite" duration-ms="27383" started-at="2022-03-06T11:23:07 EST" finished-at="2022-03-06T11:23:34 EST">
    <groups>
      <group name="cucumber">
        <method signature="AbstractTestNGCucumberTests.runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:TestRunner@1877ab81]" name="runScenario" class="io.cucumber.testng.AbstractTestNGCucumberTests"/>
      </group> <!-- cucumber -->
    </groups>
    <test name="Surefire test" duration-ms="27383" started-at="2022-03-06T11:23:07 EST" finished-at="2022-03-06T11:23:34 EST">
      <class name="TestRunner">
        <test-method status="PASS" signature="setUpClass()[pri:0, instance:TestRunner@1877ab81]" name="setUpClass" is-config="true" duration-ms="237" started-at="2022-03-06T11:23:07 EST" finished-at="2022-03-06T11:23:07 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- setUpClass -->
        <test-method status="FAIL" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:TestRunner@1877ab81]" name="runScenario" duration-ms="4873" started-at="2022-03-06T11:23:07 EST" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-03-06T11:23:12 EST">
          <params>
            <param index="0">
              <value>
                <![CDATA["Sign in after creating a brand new test account"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Signup]"]]>
              </value>
            </param>
          </params>
          <exception class="io.cucumber.testng.UndefinedStepException">
            <message>
              <![CDATA[The step 'I create a brand new student account' and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("I create a brand new student account")
public void i_create_a_brand_new_student_account() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("I click on Login link")
public void i_click_on_login_link() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I login with brand new student credentials")
public void i_login_with_brand_new_student_credentials() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
]]>
            </message>
            <full-stacktrace>
              <![CDATA[io.cucumber.testng.UndefinedStepException: The step 'I create a brand new student account' and 2 other step(s) are undefined.
You can implement these steps using the snippet(s) below:

@Given("I create a brand new student account")
public void i_create_a_brand_new_student_account() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@Given("I click on Login link")
public void i_click_on_login_link() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}
@When("I login with brand new student credentials")
public void i_login_with_brand_new_student_credentials() {
    // Write code here that turns the phrase above into concrete actions
    throw new io.cucumber.java.PendingException();
}

at io.cucumber.core.runtime.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:69)
at io.cucumber.testng.TestCaseResultObserver.assertTestCasePassed(TestCaseResultObserver.java:23)
at io.cucumber.testng.TestNGCucumberRunner.lambda$runScenario$0(TestNGCucumberRunner.java:118)
at io.cucumber.core.runtime.CucumberExecutionContext.runTestCase(CucumberExecutionContext.java:117)
at io.cucumber.testng.TestNGCucumberRunner.runScenario(TestNGCucumberRunner.java:114)
at io.cucumber.testng.AbstractTestNGCucumberTests.runScenario(AbstractTestNGCucumberTests.java:31)
at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.lang.reflect.Method.invoke(Method.java:498)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:132)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:599)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:174)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:822)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:147)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
at java.lang.Thread.run(Thread.java:748)
]]>
            </full-stacktrace>
          </exception> <!-- io.cucumber.testng.UndefinedStepException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:TestRunner@1877ab81]" name="runScenario" duration-ms="7438" started-at="2022-03-06T11:23:12 EST" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-03-06T11:23:19 EST">
          <params>
            <param index="0">
              <value>
                <![CDATA["Signup with different sets of test data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Signup]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:TestRunner@1877ab81]" name="runScenario" duration-ms="11640" started-at="2022-03-06T11:23:19 EST" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-03-06T11:23:31 EST">
          <params>
            <param index="0">
              <value>
                <![CDATA["Signup with different sets of test data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Signup]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="runScenario(io.cucumber.testng.PickleWrapper, io.cucumber.testng.FeatureWrapper)[pri:0, instance:TestRunner@1877ab81]" name="runScenario" duration-ms="3113" started-at="2022-03-06T11:23:31 EST" description="Runs Cucumber Scenarios" data-provider="scenarios" finished-at="2022-03-06T11:23:34 EST">
          <params>
            <param index="0">
              <value>
                <![CDATA["Signup with different sets of test data"]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA["Optional[Signup]"]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- runScenario -->
        <test-method status="PASS" signature="tearDownClass()[pri:0, instance:TestRunner@1877ab81]" name="tearDownClass" is-config="true" duration-ms="57" started-at="2022-03-06T11:23:34 EST" finished-at="2022-03-06T11:23:34 EST">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- tearDownClass -->
      </class> <!-- TestRunner -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
